@page "/Manage"
@using ShortLinkGeneration.Components.Models
@using ShortLinkGeneration.Jwt
@using ShortLinkGeneration.Repositories.Settings
@using ShortLinkGeneration.Repositories.ShortLinkGeneration
@inject AuthUtils AuthUtils
@inject ISettingsRepository SettingsRepository
@inject ISnackbar Snackbar
@inject IShortLinkGenerationRepository ShortLinkGenerationRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudSnackbarProvider/>
<PageTitle>后台管理</PageTitle>

<MudPaper Class="pa-16 ma-2">
    <MudText Typo="Typo.h4" Class="mb-2">后台管理</MudText>

    <MudSwitch
        @bind-Value="@MustBeCreatedAfterLoggingIn"
        Color="Color.Primary"
        Label="创建短连接是否需要登录"
        Class="mb-2"/>

    @if (ShortLinkGenerationTables == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
            <tr>
                @foreach (var header in new[] { "ID", "长链接", "短链接后缀", "创建时间", "点击次数", "操作" })
                {
                    <th style="text-align: center">@header</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var row in ShortLinkGenerationTables)
            {
                <tr>
                    <td class="table-cell-wrap" style="text-align: center">@row.ShortId</td>
                    <td class="table-cell-wrap">@row.LongUrl</td>
                    <td class="table-cell-wrap" style="text-align: center">@row.ShortUrlSuffix</td>
                    <td class="table-cell-wrap" style="text-align: center">@row.CreateTime</td>
                    <td class="table-cell-wrap" style="text-align: center">@row.ClickCount</td>
                    <td class="table-cell-wrap" style="text-align: center">
                        <MudButton
                            Variant="Variant.Text"
                            Color="Color.Secondary"
                            OnClick="@(() => DeleteShortLinkAsync(row.ShortId))">
                            删除
                        </MudButton>
                        <MudButton
                            Variant="Variant.Text"
                            Color="Color.Default"
                            OnClick="@(() => CopyShortLink(row.ShortUrlSuffix))">
                            复制
                        </MudButton>
                        <MudButton
                            Variant="Variant.Text"
                            Color="Color.Default"
                            OnClick="@(() => UpdateShortLinkAsync(row.ShortId))">
                            修改
                        </MudButton>
                    </td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>

    }
</MudPaper>

<style>
    .table-cell-wrap {
        word-wrap: break-word;
        white-space: normal;
        max-width: 500px;
        min-width: 100px;
    }
</style>


@code {
    private bool _mustBeCreatedAfterLoggingIn = false;

    private bool MustBeCreatedAfterLoggingIn
    {
        get => _mustBeCreatedAfterLoggingIn;
        set
        {
            _mustBeCreatedAfterLoggingIn = value;
            _ = AddOrUpdateSettingAsync("MustBeCreatedAfterLoggingIn", value.ToString());

            async Task AddOrUpdateSettingAsync(string key, string value)
            {
                await SettingsRepository.AddOrUpdateSettingAsync(key, value);
                Snackbar.Add("设置已保存", Severity.Success, SnackbarConfig.DefaultOptions);
            }
        }
    }

    private string _baseUrl = "";

    override protected void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        _baseUrl = $"{uri.Scheme}://{uri.Authority}/";
    }

    private List<ShortLinkGenerationTable>? ShortLinkGenerationTables { get; set; } = null;

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (!await AuthUtils.Auth(UserRole.Admin, UserRole.User)) return;

        Snackbar.Configuration.PreventDuplicates = false;
        _mustBeCreatedAfterLoggingIn = bool.Parse(await SettingsRepository.GetSettingAsync("MustBeCreatedAfterLoggingIn") ?? "false");

        ShortLinkGenerationTables = await ShortLinkGenerationRepository.GetShortLinkGenerationListAsync();

        StateHasChanged();
    }

    // 删除短链接
    private async Task DeleteShortLinkAsync(int shortId)
    {
        if (!await AuthUtils.Auth(UserRole.Admin, UserRole.User)) return;
        // 弹出确认框
        bool? result = await DialogService.ShowMessageBox("警告", "确认删除短连接？", "删除", "取消");
        if (result != true) return;

        await ShortLinkGenerationRepository.DeleteShortLinkGenerationAsync(shortId);
        ShortLinkGenerationTables = await ShortLinkGenerationRepository.GetShortLinkGenerationListAsync();
        Snackbar.Add("短链接已删除", Severity.Success, SnackbarConfig.DefaultOptions);
        StateHasChanged();
    }

    // 复制短链接
    private async Task CopyShortLink(string shortUrl)
    {
        shortUrl = $"{_baseUrl}{shortUrl}";
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", shortUrl);
        Snackbar.Add("短链接已复制", Severity.Success, SnackbarConfig.DefaultOptions);
    }

    // 修改短连接
    private async Task UpdateShortLinkAsync(int shortId)
    {
        if (!await AuthUtils.Auth(UserRole.Admin, UserRole.User)) return;
        // 弹窗输入新的长链接
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<InputDialog>("修改长连接", closeOnEscapeKey);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var longUrl = result.Data as string;
            if (string.IsNullOrWhiteSpace(longUrl))
            {
                Snackbar.Add("长链接不能为空", Severity.Error, SnackbarConfig.DefaultOptions);
                return;
            }

            // 判断_longLinks是否为URL
            if (!Uri.TryCreate(longUrl, UriKind.Absolute, out _))
            {
                Snackbar.Add("请输入正确的URL", Severity.Error, SnackbarConfig.DefaultOptions);
                return;
            }

            await ShortLinkGenerationRepository.UpdateShortLinkGenerationAsync(shortId, longUrl);
            ShortLinkGenerationTables = await ShortLinkGenerationRepository.GetShortLinkGenerationListAsync();
            Snackbar.Add("短链接已修改", Severity.Success, SnackbarConfig.DefaultOptions);
            StateHasChanged();
        }

    }
}